--------------------------------------------------------------------------
Symbol tables

--------------------------------------------------------------------------
Terms

[\p. p, \q. p, \q. q]

[\p. p, \q. q, \q. p]

[(let p <- F in p) <=> F, (let q <- q in p) <=> p, (let q <- T in q) <=> T]

[(let p <- F in p) <=> F, (let q <- T in q) <=> T, (let q <- q in p) <=> p]

Less

Less

\(\y. g (x /\ y)). g x

!(\y. g (x /\ y)). g x

let a d <- (\e. d e) = d in a = \b. (\c. c) = \c. c

let a d <-
    let e g <-
        (let h <- d g in
         \i.
           (let j <- h in
            \k. (\l. l j k) = \m. m ((\c. c) = \c. c) ((\c. c) = \c. c))
             i <=> h) (d ((select) d)) in
    e = (\f. (\c. c) = \c. c) in
a = \b. (\c. c) = \c. c

let a p <-
    (let h <-
         let q s <-
             let q t <-
                 (let f <- p s = p t in
                  \g.
                    (let h <- f in
                     \i.
                       (\j. j h i) =
                       \k. k ((\d. d) = \d. d) ((\d. d) = \d. d)) g <=> f)
                   (s = t) in
             q = (\r. (\d. d) = \d. d) in
         q = (\r. (\d. d) = \d. d) in
     \i. (\j. j h i) = \k. k ((\d. d) = \d. d) ((\d. d) = \d. d))
      (let u <-
           let q v <-
               let w z <- v = p z in
               let b x <-
                   (let f <-
                        let q y <-
                            (let f <- w y in
                             \g.
                               (let h <- f in
                                \i.
                                  (\j. j h i) =
                                  \k.
                                    k ((\d. d) = \d. d) ((\d. d) = \d. d))
                                 g <=> f) x in
                        q = (\r. (\d. d) = \d. d) in
                    \g.
                      (let h <- f in
                       \i.
                         (\j. j h i) =
                         \k. k ((\d. d) = \d. d) ((\d. d) = \d. d)) g <=>
                      f) x in
               b = (\c. (\d. d) = \d. d) in
           q = (\r. (\d. d) = \d. d) in
       (let f <- u in
        \g.
          (let h <- f in
           \i. (\j. j h i) = \k. k ((\d. d) = \d. d) ((\d. d) = \d. d))
            g <=> f) (let b d <- d in b = \c. (\d. d) = \d. d)) in
let b e <-
    (let f <-
         let l n <-
             (let f <- a n in
              \g.
                (let h <- f in
                 \i.
                   (\j. j h i) = \k. k ((\d. d) = \d. d) ((\d. d) = \d. d))
                  g <=> f) e in
         l = (\m. (\d. d) = \d. d) in
     \g.
       (let h <- f in
        \i. (\j. j h i) = \k. k ((\d. d) = \d. d) ((\d. d) = \d. d)) g <=>
       f) e in
b = \c. (\d. d) = \d. d

--------------------------------------------------------------------------
Substitution

\q. q ==> p

([], [(p, q)])

\q0. q0 ==> q

\x. (!y. y) /\ y

([], [(y, x)])

\x0. (!y. y) /\ x

\x'.
  ((!x. ~s x \/ t x) /\ (s x /\ ~t x \/ ~s x /\ t x)) /\
  (!x. ~t x \/ u x) /\ (t x' /\ ~u x' \/ ~t x' /\ u x')

([], [(x, x')])

\x0.
  ((!x. ~s x \/ t x) /\ (s x' /\ ~t x' \/ ~s x' /\ t x')) /\
  (!x. ~t x \/ u x) /\ (t x0 /\ ~u x0 \/ ~t x0 /\ u x0)

--------------------------------------------------------------------------
Reading interpretations

type "HOLLight.fun" as "->"
type "HOLLight.bool" as "bool"
const "HOLLight.=" as "="
const "HOLLight.T" as "Data.Bool.T"

--------------------------------------------------------------------------
Compressing articles

Compressing article "empty"

Compressing article "example1"

Compressing article "example2"

Compressing article "example3"

Compressing article "example4"

Compressing article "example5"

Compressing article "example6"

Compressing article "example7"

Compressing article "example8"

Compressing article "example9"

Compressing article "example10"

Compressing article "bool-true-def"
WARNING: 15 objects left in the dictionary by articles/hol-light/bool-true-def.art

Compressing article "bool-true-thm"
WARNING: 22 objects left in the dictionary by articles/hol-light/bool-true-thm.art

--------------------------------------------------------------------------
Summarizing articles

Summarizing compressed article "empty"


Summarizing compressed article "example1"
1 external type operator: bool
1 external constant: T
1 assumption:
  |- T
1 theorem:
  |- T

Summarizing compressed article "example2"
1 external type operator: bool
1 external constant: T
1 assumption:
  |- let x <- T in x
1 theorem:
  |- let y <- T in y

Summarizing compressed article "example3"
2 external type operators: -> bool
1 external constant: =
1 theorem:
  |- x = x

Summarizing compressed article "example4"
2 external type operators: -> bool
3 external constants: = a b
2 assumptions:
  |- a
  |- a <=> b
1 theorem:
  |- b

Summarizing compressed article "example5"
2 external type operators: -> bool
2 external constants: = a
1 theorem:
  |- a <=> a

Summarizing compressed article "example6"
2 external type operators: -> bool
4 external constants: = a b c
2 assumptions:
  |- a <=> b
  |- b <=> c
1 theorem:
  |- a <=> c

Summarizing compressed article "example7"
2 external type operators: -> bool
4 external constants: = a b c
2 assumptions:
  |- a <=> b
  |- b <=> c
1 theorem:
  |- a <=> c

Summarizing compressed article "example8"
2 external type operators: -> bool
4 external constants: = a b c
2 assumptions:
  |- a <=> b
  |- b <=> c
1 theorem:
  |- a <=> c

Summarizing compressed article "example9"
2 external type operators: -> bool
4 external constants: = a b c
2 assumptions:
  |- a <=> b
  |- b <=> c
1 theorem:
  |- a <=> c

Summarizing compressed article "example10"
1 external type operator: bool
1 external constant: c
1 assumption:
  |- c
1 theorem:
  |- c

Summarizing compressed article "bool-true-def"
2 external type operators: -> bool
1 external constant: =
1 defined constant: T
1 theorem:
  |- T <=> (\p. p) = \p. p

Summarizing compressed article "bool-true-thm"
2 external type operators: -> bool
2 external constants: = T
1 assumption:
  |- T <=> (\p. p) = \p. p
1 theorem:
  |- T

--------------------------------------------------------------------------
Theory package directories

<directory>

--------------------------------------------------------------------------
Config files

[repo]
name = gilith
url = http://opentheory.gilith.com/
refresh = 604800

[license]
name = MIT
url = http://www.gilith.com/research/opentheory/licenses/MIT.txt

[license]
name = HOLLight
url = http://www.gilith.com/research/opentheory/licenses/HOLLight.txt

[cleanup]
auto = 3600

[install]
minimal = false

[system]
chmod = chmod
cp = cp
curl = curl --silent --show-error --user-agent opentheory
echo = echo
sha = sha1sum --binary
tar = tar

--------------------------------------------------------------------------
Importing theory packages

Importing theory package "empty-1.0"


Importing theory package "bool-true-def-1.0"
2 external type operators: -> bool
1 external constant: =
1 defined constant: T
1 theorem:
  |- T <=> (\p. p) = \p. p

Importing theory package "bool-true-thm-1.0"
2 external type operators: -> bool
2 external constants: = T
1 assumption:
  |- T <=> (\p. p) = \p. p
1 theorem:
  |- T

Importing theory package "bool-true-1.0"
2 external type operators: -> bool
1 external constant: =
1 defined constant: T
2 theorems:
  |- T
  |- T <=> (\p. p) = \p. p

Importing theory package "bool-true-assert-1.0"
2 external type operators: -> bool
2 external constants: = T
1 assumption:
  |- T <=> (\a. T) = \b. b
1 theorem:
  |- T <=> (\a. T) = \b. b

Importing theory package "bool-true-axiom-1.0"
2 external type operators: -> bool
1 external constant: =
1 defined constant: T
1 axiom:
  |- T <=> (\a. T) = \b. b
2 theorems:
  |- T <=> (\a. T) = \b. b
  |- T <=> (\p. p) = \p. p

--------------------------------------------------------------------------
Package queries

package query "Empty" resulted in
  {}

package query "All" resulted in
  {bool-true-1.0, bool-true-assert-1.0, bool-true-axiom-1.0,
   bool-true-def-1.0, bool-true-thm-1.0, empty-1.0, theorems1-1.0}

package query "bool-true" resulted in
  {bool-true-1.0}

package query "bool-true-1.0" resulted in
  {bool-true-1.0}

package query "bool-true-2.0" resulted in
  {}

package query "Latest" resulted in
  {bool-true-1.0, bool-true-assert-1.0, bool-true-axiom-1.0, theorems1-1.0}

package query "Latest bool-true" resulted in
  {bool-true-1.0}

package query "Latest All" resulted in
  {bool-true-1.0, bool-true-assert-1.0, bool-true-axiom-1.0,
   bool-true-def-1.0, bool-true-thm-1.0, empty-1.0, theorems1-1.0}

package query "Latest bool-true-1.0" resulted in
  {bool-true-1.0}

package query "Includes bool-true" resulted in
  {bool-true-def-1.0, bool-true-thm-1.0}

package query "Subtheories bool-true" resulted in
  {bool-true-def-1.0, bool-true-thm-1.0}

package query "SubtheoryOf Subtheories bool-true" resulted in
  {bool-true-1.0}

package query "Subtheories* bool-true" resulted in
  {bool-true-1.0, bool-true-def-1.0, bool-true-thm-1.0}

package query "SubtheoryOf Subtheories* bool-true" resulted in
  {bool-true-1.0}

package query "Subtheories+ bool-true" resulted in
  {bool-true-def-1.0, bool-true-thm-1.0}

package query "Subtheories? bool-true" resulted in
  {bool-true-1.0, bool-true-def-1.0, bool-true-thm-1.0}

package query "Subtheories?+ bool-true" resulted in
  {bool-true-1.0, bool-true-def-1.0, bool-true-thm-1.0}

package query "bool-true*" resulted in
  {bool-true-1.0, bool-true-assert-1.0, bool-true-axiom-1.0, theorems1-1.0}

package query "bool-true+" resulted in
  {bool-true-1.0}

package query "bool-true?" resulted in
  {bool-true-1.0, bool-true-assert-1.0, bool-true-axiom-1.0, theorems1-1.0}

package query "bool-true | bool-true-def" resulted in
  {bool-true-1.0, bool-true-def-1.0}

package query "Subtheories+ bool-true - bool-true-def" resulted in
  {bool-true-thm-1.0}

package query "(RequiredBy | IncludedBy) bool-true-def" resulted in
  {bool-true-1.0, bool-true-axiom-1.0}

package query "(RequiredBy | IncludedBy)+ bool-true-def" resulted in
  {bool-true-1.0, bool-true-axiom-1.0}

package query "Uploadable" resulted in
  {}

package query "Upgradable" resulted in
  {}

