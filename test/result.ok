--------------------------------------------------------------------------
Symbol tables

--------------------------------------------------------------------------
Terms

[\p. p, \q. p, \q. q]

[\p. p, \q. q, \q. p]

[(\p. p) F <=> F, (\q. p) q <=> p, (\q. q) T <=> T]

[(\p. p) F <=> F, (\q. q) T <=> T, (\q. p) q <=> p]

\(\y. g (x /\ y)). g x

!(\y. g (x /\ y)). g x

--------------------------------------------------------------------------
Substitution

\q. q ==> p

([], [(p, q)])

\q0. q0 ==> q

\x. (!y. y) /\ y

([], [(y, x)])

\x0. (!y. y) /\ x

\x'.
  ((!x. ~s x \/ t x) /\ (s x /\ ~t x \/ ~s x /\ t x)) /\
  (!x. ~t x \/ u x) /\ (t x' /\ ~u x' \/ ~t x' /\ u x')

([], [(x, x')])

\x0.
  ((!x. ~s x \/ t x) /\ (s x' /\ ~t x' \/ ~s x' /\ t x')) /\
  (!x. ~t x \/ u x) /\ (t x0 /\ ~u x0 \/ ~t x0 /\ u x0)

--------------------------------------------------------------------------
Reading interpretations

type "HOLLight.1" as "Data.Unit.unit"
type "HOLLight.bool" as "bool"
type "HOLLight.fun" as "->"
type "HOLLight.ind" as "ind"
type "HOLLight.list" as "Data.List.list"
type "HOLLight.num" as "Number.Natural.natural"
type "HOLLight.option" as "Data.Option.option"
type "HOLLight.prod" as "Data.Pair.*"
type "HOLLight.sum" as "Data.Sum.+"
const "HOLLight.!" as "Data.Bool.!"
const "HOLLight.*" as "Number.Natural.*"
const "HOLLight.+" as "Number.Natural.+"
const "HOLLight.," as "Data.Pair.,"
const "HOLLight.-" as "Number.Natural.-"
const "HOLLight./\\" as "Data.Bool./\\"
const "HOLLight.<" as "Number.Natural.<"
const "HOLLight.<=" as "Number.Natural.<="
const "HOLLight.=" as "="
const "HOLLight.==>" as "Data.Bool.==>"
const "HOLLight.>" as "Number.Natural.>"
const "HOLLight.>=" as "Number.Natural.>="
const "HOLLight.?" as "Data.Bool.?"
const "HOLLight.?!" as "Data.Bool.?!"
const "HOLLight.@" as "Data.Bool.select"
const "HOLLight.\\/" as "Data.Bool.\\/"
const "HOLLight._0" as "Number.Numeral.zero"
const "HOLLight.~" as "Data.Bool.~"
const "HOLLight.minimal" as "Number.Natural.minimal"
const "HOLLight.o" as "Function.o"
const "HOLLight.one" as "Data.Unit.()"
const "HOLLight.ALL" as "Data.List.all"
const "HOLLight.APPEND" as "Data.List.@"
const "HOLLight.BIT0" as "Number.Numeral.bit0"
const "HOLLight.BIT1" as "Number.Numeral.bit1"
const "HOLLight.COND" as "Data.Bool.cond"
const "HOLLight.CONS" as "Data.List.::"
const "HOLLight.DIV" as "Number.Natural.div"
const "HOLLight.EL" as "Data.List.nth"
const "HOLLight.EVEN" as "Number.Natural.even"
const "HOLLight.EX" as "Data.List.exists"
const "HOLLight.EXP" as "Number.Natural.exp"
const "HOLLight.F" as "Data.Bool.F"
const "HOLLight.FACT" as "Number.Natural.factorial"
const "HOLLight.FILTER" as "Data.List.filter"
const "HOLLight.FST" as "Data.Pair.fst"
const "HOLLight.GABS" as "Data.Bool.select"
const "HOLLight.GEQ" as "="
const "HOLLight.HD" as "Data.List.head"
const "HOLLight.I" as "Function.id"
const "HOLLight.INL" as "Data.Sum.left"
const "HOLLight.INR" as "Data.Sum.right"
const "HOLLight.LAST" as "Data.List.last"
const "HOLLight.LENGTH" as "Data.List.length"
const "HOLLight.LET" as "Data.Bool.let"
const "HOLLight.LET_END" as "Unwanted.id"
const "HOLLight.MAP" as "Data.List.map"
const "HOLLight.MAX" as "Number.Natural.max"
const "HOLLight.MEASURE" as "Relation.measure"
const "HOLLight.MEM" as "Data.List.member"
const "HOLLight.MIN" as "Number.Natural.min"
const "HOLLight.MOD" as "Number.Natural.mod"
const "HOLLight.NIL" as "Data.List.[]"
const "HOLLight.NONE" as "Data.Option.none"
const "HOLLight.NULL" as "Data.List.null"
const "HOLLight.NUMERAL" as "Unwanted.id"
const "HOLLight.ODD" as "Number.Natural.odd"
const "HOLLight.ONE_ONE" as "Function.injective"
const "HOLLight.ONTO" as "Function.surjective"
const "HOLLight.OUTL" as "Data.Sum.destLeft"
const "HOLLight.OUTR" as "Data.Sum.destRight"
const "HOLLight.PRE" as "Number.Natural.pre"
const "HOLLight.REPLICATE" as "Data.List.duplicate"
const "HOLLight.REVERSE" as "Data.List.reverse"
const "HOLLight.SND" as "Data.Pair.snd"
const "HOLLight.SOME" as "Data.Option.some"
const "HOLLight.SUC" as "Number.Natural.suc"
const "HOLLight.T" as "Data.Bool.T"
const "HOLLight.TL" as "Data.List.tail"
const "HOLLight.WF" as "Relation.wellFounded"

type "HOLLight.mod" as "Number.Modular.modular"
type "HOLLight.plane" as "Data.Char.Plane.plane"
type "HOLLight.position" as "Data.Char.Position.position"
type "HOLLight.unicode" as "Data.Char.char"
type "HOLLight.word" as "Data.Word.word"
const "HOLLight.byte_width" as "Data.Byte.width"
const "HOLLight.mod_N" as "Number.Modular.size"
const "HOLLight.mod_from_num" as "Number.Modular.fromNatural"
const "HOLLight.mod_to_num" as "Number.Modular.toNatural"
const "HOLLight.plane_size" as "Data.Char.Plane.size"
const "HOLLight.position_width" as "Data.Char.Position.width"
const "HOLLight.word_from_num" as "Data.Word.fromNatural"
const "HOLLight.word_size" as "Data.Word.size"
const "HOLLight.word_to_list" as "Data.Word.toList"
const "HOLLight.word_to_list_f" as "Data.Word.toList.f"
const "HOLLight.word_to_num" as "Data.Word.toNatural"
const "HOLLight.word_width" as "Data.Word.width"
const "HOLLight.Unicode" as "Data.Char.unicode"

--------------------------------------------------------------------------
Compressing articles

Compressing article "empty"
User: 0.000  System: 0.000  GC: 0.000  Real: 0.000
User: 0.000  System: 0.000  GC: 0.000  Real: 0.000

Compressing article "example1"
User: 0.000  System: 0.000  GC: 0.000  Real: 0.000
User: 0.000  System: 0.000  GC: 0.000  Real: 0.000

Compressing article "example2"
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001

Compressing article "example3"
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001

Compressing article "example4"
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001
User: 0.001  System: 0.000  GC: 0.000  Real: 0.001

Compressing article "bool-def-true"
WARNING: 19 objects left in the dictionary by articles/hol-light/bool-def-true.art
User: 0.002  System: 0.000  GC: 0.000  Real: 0.002
User: 0.002  System: 0.000  GC: 0.000  Real: 0.002

Compressing article "bool-int-true"
WARNING: 26 objects left in the dictionary by articles/hol-light/bool-int-true.art
User: 0.003  System: 0.000  GC: 0.000  Real: 0.003
User: 0.002  System: 0.000  GC: 0.000  Real: 0.002

Compressing article "bool-true-aux"
WARNING: 24 objects left in the dictionary by articles/hol-light/bool-true-aux.art
User: 0.003  System: 0.000  GC: 0.000  Real: 0.003
User: 0.002  System: 0.000  GC: 0.000  Real: 0.002

--------------------------------------------------------------------------
Summarizing articles

Summarizing compressed article "empty"
assumptions:
axioms:
theorems:

Summarizing compressed article "example1"
input-types: bool
input-consts: T
assumptions:
  |- T
axioms:
theorems:
  |- T

Summarizing compressed article "example2"
input-types: bool
input-consts: T
assumptions:
  |- (\x. x) T
axioms:
theorems:
  |- (\y. y) T

Summarizing compressed article "example3"
input-types: -> bool
input-consts: =
assumptions:
axioms:
theorems:
  |- x = x

Summarizing compressed article "example4"
input-types: -> bool
input-consts: =
assumptions:
axioms:
theorems:
  |- x = x

Summarizing compressed article "bool-def-true"
input-types: -> bool
input-consts: =
assumptions:
defined-consts: T
axioms:
theorems:
  |- T <=> (\p. p) = \p. p

Summarizing compressed article "bool-int-true"
input-types: -> bool
input-consts: = T
assumptions:
  |- T <=> (\p. p) = \p. p
axioms:
theorems:
  |- T

Summarizing compressed article "bool-true-aux"
input-types: -> bool
input-consts: = T
assumptions:
  |- T
axioms:
theorems:
  |- t <=> t <=> T

--------------------------------------------------------------------------
Theory package directories

<directory>

--------------------------------------------------------------------------
Config files

[repo]
name = gilith
url = http://opentheory.gilith.com/
refresh = 604800

[install]
cleanup = 3600

[system]
chmod = chmod
cp = cp
curl = curl --silent --show-error --user-agent opentheory
echo = echo
sha = sha1sum --binary
tar = tar

--------------------------------------------------------------------------
Importing theory packages

Importing theory package "empty-1.0"
assumptions:
axioms:
theorems:

Importing theory package "bool-def-true-1.0"
input-types: -> bool
input-consts: =
assumptions:
defined-consts: T
axioms:
theorems:
  |- T <=> (\p. p) = \p. p

Importing theory package "bool-int-true-1.0"
input-types: -> bool
input-consts: = T
assumptions:
  |- T <=> (\p. p) = \p. p
axioms:
theorems:
  |- T

Importing theory package "bool-true-1.0"
input-types: -> bool
input-consts: =
assumptions:
defined-consts: T
axioms:
theorems:
  |- T
  |- T <=> (\p. p) = \p. p

