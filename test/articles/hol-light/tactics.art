"_FALSITY_"
"F"
const
0
def
"bool"
typeOp
1
def
nil
opType
2
def
constTerm
3
def
defineConst
4
def
pop
5
def
pop
nil
"p"
2
ref
var
5
ref
2
ref
constTerm
6
def
nil
cons
cons
"q"
2
ref
var
3
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
nil
"==>"
const
7
def
"fun"
typeOp
8
def
2
ref
8
ref
2
ref
2
ref
nil
cons
cons
opType
9
def
nil
cons
cons
opType
10
def
constTerm
11
def
"="
const
12
def
10
ref
constTerm
13
def
"p"
2
ref
var
varTerm
14
def
appTerm
15
def
"q"
2
ref
var
varTerm
16
def
appTerm
17
def
appTerm
18
def
11
ref
16
ref
appTerm
19
def
14
ref
appTerm
20
def
appTerm
21
def
axiom
22
def
# |- (p <=> q) ==> q ==> p
subst
# |- (_FALSITY_ <=> F) ==> F ==> _FALSITY_
23
def
pop
nil
"p"
2
ref
var
13
ref
6
ref
appTerm
24
def
3
ref
appTerm
25
def
nil
cons
cons
"q"
2
ref
var
11
ref
3
ref
appTerm
26
def
6
ref
appTerm
27
def
nil
cons
cons
nil
cons
cons
nil
cons
cons
14
ref
11
ref
14
ref
appTerm
28
def
16
ref
appTerm
29
def
nil
cons
cons
16
ref
axiom
30
def
# p, p ==> q
# |- q
subst
# _FALSITY_ <=> F, (_FALSITY_ <=> F) ==> F ==> _FALSITY_
# |- F ==> _FALSITY_
31
def
pop
23
ref
31
ref
deductAntisym
32
def
pop
32
ref
23
ref
# _FALSITY_ <=> F
# |- (_FALSITY_ <=> F) ==> F ==> _FALSITY_ <=> F ==> _FALSITY_
# |- (_FALSITY_ <=> F) ==> F ==> _FALSITY_
eqMp
# _FALSITY_ <=> F
# |- F ==> _FALSITY_
33
def
pop
4
ref
33
ref
deductAntisym
34
def
pop
34
ref
4
ref
# |- (_FALSITY_ <=> F) <=> F ==> _FALSITY_
# |- _FALSITY_ <=> F
eqMp
# |- F ==> _FALSITY_
35
def
pop
nil
"p"
2
ref
var
6
ref
nil
cons
cons
"q"
2
ref
var
3
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
nil
18
ref
29
ref
appTerm
36
def
axiom
37
def
# |- (p <=> q) ==> p ==> q
subst
# |- (_FALSITY_ <=> F) ==> _FALSITY_ ==> F
38
def
pop
nil
"p"
2
ref
var
25
ref
nil
cons
cons
"q"
2
ref
var
11
ref
6
ref
appTerm
39
def
3
ref
appTerm
40
def
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# _FALSITY_ <=> F, (_FALSITY_ <=> F) ==> _FALSITY_ ==> F
# |- _FALSITY_ ==> F
41
def
pop
38
ref
41
ref
deductAntisym
42
def
pop
42
ref
38
ref
# _FALSITY_ <=> F
# |- (_FALSITY_ <=> F) ==> _FALSITY_ ==> F <=> _FALSITY_ ==> F
# |- (_FALSITY_ <=> F) ==> _FALSITY_ ==> F
eqMp
# _FALSITY_ <=> F
# |- _FALSITY_ ==> F
43
def
pop
4
ref
43
ref
deductAntisym
44
def
pop
44
ref
4
ref
# |- (_FALSITY_ <=> F) <=> _FALSITY_ ==> F
# |- _FALSITY_ <=> F
eqMp
# |- _FALSITY_ ==> F
45
def
pop
6
ref
assume
46
def
pop
nil
"p"
2
ref
var
6
ref
nil
cons
cons
"q"
2
ref
var
3
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# _FALSITY_, _FALSITY_ ==> F
# |- F
47
def
pop
45
ref
47
ref
deductAntisym
48
def
pop
48
ref
45
ref
# _FALSITY_
# |- _FALSITY_ ==> F <=> F
# |- _FALSITY_ ==> F
eqMp
# _FALSITY_
# |- F
49
def
pop
46
ref
49
ref
deductAntisym
50
def
pop
"/\\"
const
51
def
10
ref
constTerm
52
def
14
ref
appTerm
53
def
19
ref
"r"
2
ref
var
varTerm
54
def
appTerm
55
def
appTerm
56
def
assume
57
def
pop
nil
"P"
2
ref
var
14
ref
nil
cons
cons
"Q"
2
ref
var
55
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
52
ref
"P"
2
ref
var
varTerm
58
def
appTerm
59
def
"Q"
2
ref
var
varTerm
60
def
appTerm
61
def
nil
cons
60
ref
axiom
62
def
# P /\ Q
# |- Q
subst
# p /\ (q ==> r)
# |- q ==> r
63
def
pop
57
ref
63
ref
deductAntisym
64
def
pop
nil
"P"
2
ref
var
14
ref
nil
cons
cons
"Q"
2
ref
var
55
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
61
ref
nil
cons
58
ref
axiom
65
def
# P /\ Q
# |- P
subst
# p /\ (q ==> r)
# |- p
66
def
pop
57
ref
66
ref
deductAntisym
67
def
pop
29
ref
assume
68
def
pop
68
ref
30
ref
deductAntisym
69
def
pop
66
ref
30
ref
deductAntisym
70
def
pop
70
ref
66
ref
# p /\ (q ==> r), p ==> q
# |- p <=> q
# p /\ (q ==> r)
# |- p
eqMp
# p /\ (q ==> r), p ==> q
# |- q
71
def
pop
nil
"p"
2
ref
var
16
ref
nil
cons
cons
"q"
2
ref
var
54
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# q, q ==> r
# |- r
72
def
pop
63
ref
72
ref
deductAntisym
73
def
pop
73
ref
63
ref
# q, p /\ (q ==> r)
# |- q ==> r <=> r
# p /\ (q ==> r)
# |- q ==> r
eqMp
# q, p /\ (q ==> r)
# |- r
74
def
pop
71
ref
74
ref
deductAntisym
75
def
pop
75
ref
71
ref
# p /\ (q ==> r), p ==> q
# |- q <=> r
# p /\ (q ==> r), p ==> q
# |- q
eqMp
# p /\ (q ==> r), p ==> q
# |- r
76
def
pop
nil
"p"
2
ref
var
29
ref
nil
cons
cons
"q"
2
ref
var
54
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
14
ref
16
ref
nil
cons
cons
53
ref
16
ref
appTerm
77
def
axiom
78
def
# p, q
# |- p /\ q
subst
# r, p ==> q
# |- (p ==> q) /\ r
79
def
pop
68
ref
79
ref
deductAntisym
80
def
pop
76
ref
79
ref
deductAntisym
81
def
pop
81
ref
76
ref
# p /\ (q ==> r), p ==> q
# |- r <=> (p ==> q) /\ r
# p /\ (q ==> r), p ==> q
# |- r
eqMp
# p /\ (q ==> r), p ==> q
# |- (p ==> q) /\ r
82
def
pop
52
ref
29
ref
appTerm
83
def
54
ref
appTerm
84
def
assume
85
def
pop
nil
"P"
2
ref
var
29
ref
nil
cons
cons
"Q"
2
ref
var
54
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
65
ref
# P /\ Q
# |- P
subst
# (p ==> q) /\ r
# |- p ==> q
86
def
pop
85
ref
86
ref
deductAntisym
87
def
pop
82
ref
86
ref
deductAntisym
88
def
pop
nil
"p"
2
ref
var
29
ref
nil
cons
cons
"q"
2
ref
var
54
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
nil
13
ref
13
ref
77
ref
appTerm
89
def
14
ref
appTerm
90
def
appTerm
91
def
29
ref
appTerm
92
def
axiom
93
def
# |- (p /\ q <=> p) <=> p ==> q
subst
# |- ((p ==> q) /\ r <=> p ==> q) <=> (p ==> q) ==> r
94
def
pop
94
ref
88
ref
# |- ((p ==> q) /\ r <=> p ==> q) <=> (p ==> q) ==> r
# p /\ (q ==> r)
# |- (p ==> q) /\ r <=> p ==> q
eqMp
# p /\ (q ==> r)
# |- (p ==> q) ==> r
95
def
pop
nil
"p"
2
ref
var
56
ref
nil
cons
cons
"q"
2
ref
var
11
ref
29
ref
appTerm
96
def
54
ref
appTerm
97
def
nil
cons
cons
nil
cons
cons
nil
cons
cons
78
ref
# p, q
# |- p /\ q
subst
# p /\ (q ==> r), (p ==> q) ==> r
# |- (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
98
def
pop
57
ref
98
ref
deductAntisym
99
def
pop
95
ref
98
ref
deductAntisym
100
def
pop
100
ref
95
ref
# p /\ (q ==> r)
# |- (p ==> q) ==> r <=> (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
# p /\ (q ==> r)
# |- (p ==> q) ==> r
eqMp
# p /\ (q ==> r)
# |- (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
101
def
pop
52
ref
56
ref
appTerm
102
def
97
ref
appTerm
103
def
assume
104
def
pop
nil
"P"
2
ref
var
56
ref
nil
cons
cons
"Q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
65
ref
# P /\ Q
# |- P
subst
# (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
# |- p /\ (q ==> r)
105
def
pop
104
ref
105
ref
deductAntisym
106
def
pop
101
ref
105
ref
deductAntisym
107
def
pop
nil
"p"
2
ref
var
56
ref
nil
cons
cons
"q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
93
ref
# |- (p /\ q <=> p) <=> p ==> q
subst
# |- ((p /\ (q ==> r)) /\ ((p ==> q) ==> r) <=> p /\ (q ==> r)) <=>
#    p /\ (q ==> r) ==> (p ==> q) ==> r
108
def
pop
108
ref
107
ref
# |- ((p /\ (q ==> r)) /\ ((p ==> q) ==> r) <=> p /\ (q ==> r)) <=>
#    p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p /\ (q ==> r)) /\ ((p ==> q) ==> r) <=> p /\ (q ==> r)
eqMp
# |- p /\ (q ==> r) ==> (p ==> q) ==> r
109
def
pop
11
ref
56
ref
appTerm
110
def
97
ref
appTerm
111
def
assume
112
def
pop
nil
"p"
2
ref
var
56
ref
nil
cons
cons
"q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r
113
def
pop
112
ref
113
ref
deductAntisym
114
def
pop
57
ref
113
ref
deductAntisym
115
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
78
ref
# p, q
# |- p /\ q
subst
# p /\ (q ==> r) ==> (p ==> q) ==> r, (p ==> q) ==> r
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r)
116
def
pop
112
ref
116
ref
deductAntisym
117
def
pop
113
ref
116
ref
deductAntisym
118
def
pop
118
ref
113
ref
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r <=>
#    (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r)
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r
eqMp
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r)
119
def
pop
52
ref
111
ref
appTerm
120
def
97
ref
appTerm
121
def
assume
122
def
pop
nil
"P"
2
ref
var
111
ref
nil
cons
cons
"Q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
65
ref
# P /\ Q
# |- P
subst
# (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r)
# |- p /\ (q ==> r) ==> (p ==> q) ==> r
123
def
pop
122
ref
123
ref
deductAntisym
124
def
pop
119
ref
123
ref
deductAntisym
125
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
93
ref
# |- (p /\ q <=> p) <=> p ==> q
subst
# |- ((p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r) <=>
#     p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#    (p /\ (q ==> r) ==> (p ==> q) ==> r) ==> (p ==> q) ==> r
126
def
pop
126
ref
125
ref
# |- ((p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r) <=>
#     p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#    (p /\ (q ==> r) ==> (p ==> q) ==> r) ==> (p ==> q) ==> r
# p /\ (q ==> r)
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ ((p ==> q) ==> r) <=>
#    p /\ (q ==> r) ==> (p ==> q) ==> r
eqMp
# p /\ (q ==> r)
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) ==> (p ==> q) ==> r
127
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
97
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# p /\ (q ==> r) ==> (p ==> q) ==> r,
# (p /\ (q ==> r) ==> (p ==> q) ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r
128
def
pop
127
ref
128
ref
deductAntisym
129
def
pop
113
ref
98
ref
deductAntisym
130
def
pop
130
ref
113
ref
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r <=> (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p ==> q) ==> r
eqMp
# p /\ (q ==> r), p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p /\ (q ==> r)) /\ ((p ==> q) ==> r)
131
def
pop
131
ref
105
ref
deductAntisym
132
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
111
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
78
ref
# p, q
# |- p /\ q
subst
# p /\ (q ==> r) ==> (p ==> q) ==> r
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) /\
#    (p /\ (q ==> r) ==> (p ==> q) ==> r)
133
def
pop
112
ref
133
ref
deductAntisym
134
def
pop
120
ref
111
ref
appTerm
135
def
assume
136
def
pop
nil
"P"
2
ref
var
111
ref
nil
cons
cons
"Q"
2
ref
var
111
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
65
ref
# P /\ Q
# |- P
subst
# (p /\ (q ==> r) ==> (p ==> q) ==> r) /\ (p /\ (q ==> r) ==> (p ==> q) ==> r)
# |- p /\ (q ==> r) ==> (p ==> q) ==> r
137
def
pop
136
ref
137
ref
deductAntisym
138
def
pop
133
ref
137
ref
deductAntisym
139
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
111
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
93
ref
# |- (p /\ q <=> p) <=> p ==> q
subst
# |- ((p /\ (q ==> r) ==> (p ==> q) ==> r) /\
#     (p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#     p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#    (p /\ (q ==> r) ==> (p ==> q) ==> r)
#    ==> p /\ (q ==> r)
#    ==> (p ==> q)
#    ==> r
140
def
pop
140
ref
139
ref
# |- ((p /\ (q ==> r) ==> (p ==> q) ==> r) /\
#     (p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#     p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#    (p /\ (q ==> r) ==> (p ==> q) ==> r)
#    ==> p /\ (q ==> r)
#    ==> (p ==> q)
#    ==> r
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r) /\
#    (p /\ (q ==> r) ==> (p ==> q) ==> r) <=>
#    p /\ (q ==> r) ==> (p ==> q) ==> r
eqMp
# |- (p /\ (q ==> r) ==> (p ==> q) ==> r)
#    ==> p /\ (q ==> r)
#    ==> (p ==> q)
#    ==> r
141
def
pop
nil
"p"
2
ref
var
111
ref
nil
cons
cons
"q"
2
ref
var
111
ref
nil
cons
cons
nil
cons
cons
nil
cons
cons
30
ref
# p, p ==> q
# |- q
subst
# p /\ (q ==> r) ==> (p ==> q) ==> r,
# (p /\ (q ==> r) ==> (p ==> q) ==> r) ==> p /\ (q ==> r) ==> (p ==> q) ==> r
# |- p /\ (q ==> r) ==> (p ==> q) ==> r
142
def
pop
141
ref
142
ref
deductAntisym
143
def
pop
109
ref
112
ref
deductAntisym
144
def
pop
