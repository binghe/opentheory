#################################################################-*-makefile-*-
# OPENTHEORY DEVELOPMENT MAKEFILE
# Copyright (c) 2005 Joe Hurd, distributed under the GNU GPL version 2
###############################################################################

.PRECIOUS: bin/mlton/%.sml bin/mlton/%.mlb bin/polyml/%.sml

###############################################################################
# Cleaning temporary files.
###############################################################################

TEMP += \
  bin/mlton/*.ssa bin/mlton/*.ssa2 bin/mlton/basis.sml \
  bin/mlton/benchmark \
  mlmon.out profile-*

###############################################################################
# The ML preprocessor.
###############################################################################

MLPP_OPTS += -r 'OpenTheoryDebug'
#MLPP_OPTS += -r 'BasicDebug|MetisDebug|OpenTheoryDebug'
#MLPP_OPTS += -r 'BasicDebug|MetisDebug|OpenTheoryDebug|OpenTheoryTrace[0-9]'

###############################################################################
# The Moscow ML compiler.
###############################################################################

MOSML_DEP = scripts/mosml_dep

bin/mosml/Makefile.src: Makefile Makefile.dev $(MOSML_DEP) $(MLPP)
	@echo
	@echo '****************************************************'
	@echo '* Regenerating the Moscow ML makefile dependencies *'
	@echo '****************************************************'
	@echo
	@$(MOSML_DEP) $(MOSML_SRC) $(MOSML_TARGETS) > $@

###############################################################################
# The MLton compiler.
###############################################################################

MLTON_OPTS += -verbose 1 -keep ssa -keep ssa2
MLTON_OPTS += -const 'Exn.keepHistory true'
#MLTON_OPTS += -show-basis basis.sml
#MLTON_OPTS += -inline 100000
#MLTON_OPTS += -const 'MLton.safe false' -const 'MLton.detectOverflow false'

###############################################################################
# Moving source files around.
###############################################################################

COPY = scripts/copy_src

MLIMPORT = scripts/mlimport

IMPORT_METIS = doc/IMPORT-METIS

src/Config.sig: ../basic/src/Config.sig $(COPY) ; @$(COPY) $< $@
src/Config.sml: ../basic/src/Config.sml $(COPY) ; @$(COPY) $< $@
src/ElementSet.sig: ../basic/src/ElementSet.sig $(COPY) ; @$(COPY) $< $@
src/ElementSet.sml: ../basic/src/ElementSet.sml $(COPY) ; @$(COPY) $< $@
src/Heap.sig: ../basic/src/Heap.sig $(COPY) ; @$(COPY) $< $@
src/Heap.sml: ../basic/src/Heap.sml $(COPY) ; @$(COPY) $< $@
src/Html.sig: ../basic/src/Html.sig $(COPY) ; @$(COPY) $< $@
src/Html.sml: ../basic/src/Html.sml $(COPY) ; @$(COPY) $< $@
src/KeyMap.sig: ../basic/src/KeyMap.sig $(COPY) ; @$(COPY) $< $@
src/KeyMap.sml: ../basic/src/KeyMap.sml $(COPY) ; @$(COPY) $< $@
src/Lazy.sig: ../basic/src/Lazy.sig $(COPY) ; @$(COPY) $< $@
src/Lazy.sml: ../basic/src/Lazy.sml $(COPY) ; @$(COPY) $< $@
src/Map.sig: ../basic/src/Map.sig $(COPY) ; @$(COPY) $< $@
src/Map.sml: ../basic/src/Map.sml $(COPY) ; @$(COPY) $< $@
src/MetisActive.sig: ../metis/src/Active.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisActive.sml: ../metis/src/Active.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtom.sig: ../metis/src/Atom.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtom.sml: ../metis/src/Atom.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtomNet.sig: ../metis/src/AtomNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtomNet.sml: ../metis/src/AtomNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisClause.sig: ../metis/src/Clause.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisClause.sml: ../metis/src/Clause.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisFormula.sig: ../metis/src/Formula.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisFormula.sml: ../metis/src/Formula.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisKnuthBendixOrder.sig: ../metis/src/KnuthBendixOrder.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisKnuthBendixOrder.sml: ../metis/src/KnuthBendixOrder.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteral.sig: ../metis/src/Literal.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteral.sml: ../metis/src/Literal.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteralNet.sig: ../metis/src/LiteralNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteralNet.sml: ../metis/src/LiteralNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisModel.sig: ../metis/src/Model.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisModel.sml: ../metis/src/Model.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNameArity.sig: ../metis/src/NameArity.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNameArity.sml: ../metis/src/NameArity.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNormalize.sig: ../metis/src/Normalize.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNormalize.sml: ../metis/src/Normalize.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProblem.sig: ../metis/src/Problem.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProblem.sml: ../metis/src/Problem.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProof.sig: ../metis/src/Proof.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProof.sml: ../metis/src/Proof.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisResolution.sig: ../metis/src/Resolution.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisResolution.sml: ../metis/src/Resolution.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRewrite.sig: ../metis/src/Rewrite.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRewrite.sml: ../metis/src/Rewrite.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRule.sig: ../metis/src/Rule.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRule.sml: ../metis/src/Rule.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubst.sig: ../metis/src/Subst.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubst.sml: ../metis/src/Subst.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubsume.sig: ../metis/src/Subsume.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubsume.sml: ../metis/src/Subsume.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTerm.sig: ../metis/src/Term.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTerm.sml: ../metis/src/Term.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTermNet.sig: ../metis/src/TermNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTermNet.sml: ../metis/src/TermNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisThm.sig: ../metis/src/Thm.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisThm.sml: ../metis/src/Thm.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTptp.sig: ../metis/src/Tptp.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTptp.sml: ../metis/src/Tptp.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisUnits.sig: ../metis/src/Units.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisUnits.sml: ../metis/src/Units.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisWaiting.sig: ../metis/src/Waiting.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisWaiting.sml: ../metis/src/Waiting.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/Options.sig: ../basic/src/Options.sig $(COPY) ; @$(COPY) $< $@
src/Options.sml: ../basic/src/Options.sml $(COPY) ; @$(COPY) $< $@
src/Ordered.sig: ../basic/src/Ordered.sig $(COPY) ; @$(COPY) $< $@
src/Ordered.sml: ../basic/src/Ordered.sml $(COPY) ; @$(COPY) $< $@
src/Parse.sig: ../basic/src/Parse.sig $(COPY) ; @$(COPY) $< $@
src/Parse.sml: ../basic/src/Parse.sml $(COPY) ; @$(COPY) $< $@
src/Portable.sig: ../basic/src/Portable.sig $(COPY) ; @$(COPY) $< $@
src/PortableMosml.sml: ../basic/src/PortableMosml.sml $(COPY) ; @$(COPY) $< $@
src/PortableMlton.sml: ../basic/src/PortableMlton.sml $(COPY) ; @$(COPY) $< $@
src/PortablePolyml.sml: ../basic/src/PortablePolyml.sml $(COPY) ; @$(COPY) $< $@
src/Print.sig: ../basic/src/Print.sig $(COPY) ; @$(COPY) $< $@
src/Print.sml: ../basic/src/Print.sml $(COPY) ; @$(COPY) $< $@
src/Random.sig: ../basic/src/Random.sig $(COPY) ; @$(COPY) $< $@
src/Random.sml: ../basic/src/Random.sml $(COPY) ; @$(COPY) $< $@
src/Set.sig: ../basic/src/Set.sig $(COPY) ; @$(COPY) $< $@
src/Set.sml: ../basic/src/Set.sml $(COPY) ; @$(COPY) $< $@
src/Sharing.sig: ../basic/src/Sharing.sig $(COPY) ; @$(COPY) $< $@
src/Sharing.sml: ../basic/src/Sharing.sml $(COPY) ; @$(COPY) $< $@
src/Stream.sig: ../basic/src/Stream.sig $(COPY) ; @$(COPY) $< $@
src/Stream.sml: ../basic/src/Stream.sml $(COPY) ; @$(COPY) $< $@
src/Useful.sig: ../basic/src/Useful.sig $(COPY) ; @$(COPY) $< $@
src/Useful.sml: ../basic/src/Useful.sml $(COPY) ; @$(COPY) $< $@
src/VertexGraph.sig: ../basic/src/VertexGraph.sig $(COPY) ; @$(COPY) $< $@
src/VertexGraph.sml: ../basic/src/VertexGraph.sml $(COPY) ; @$(COPY) $< $@

src/selftest.sml: test/test.sml $(COPY) ; @$(COPY) $< $@

src/benchmark.sml: src/opentheory.sml $(COPY) ; @$(COPY) $< $@

###############################################################################
# Import and install theories.
###############################################################################

HOL_LIGHT_DIR = ../hol-light

THEORY_DIR = data/theories

OPENTHEORY_INIT = $(OPENTHEORY) init

IMPORT_THEORIES = scripts/import-theories -p "HOL Light theory" -u

INSTALL_THEORIES = scripts/install-theories -u

CHECK_THEORIES = scripts/check-theories

.PHONY: reset-directory
reset-directory: $(OPENTHEORY)
	rm -rf $(HOME)/.opentheory
	$(OPENTHEORY_INIT)

.PHONY: import-standard-theories
import-standard-theories: $(OPENTHEORY)
	$(MAKE) -C $(HOL_LIGHT_DIR)/opentheory standard-theories
	$(IMPORT_THEORIES) -l HOLLight $(HOL_LIGHT_DIR)/opentheory/articles

.PHONY: import-example-theories
import-example-theories: $(OPENTHEORY)
	$(MAKE) -C $(HOL_LIGHT_DIR)/opentheory example-theories
	$(IMPORT_THEORIES) $(HOL_LIGHT_DIR)/opentheory/articles

.PHONY: standard-theories
standard-theories: $(OPENTHEORY)
	$(MAKE) import-standard-theories
	$(INSTALL_THEORIES)
	$(CHECK_THEORIES)

.PHONY: example-theories
example-theories: $(OPENTHEORY)
	$(MAKE) import-example-theories
	$(INSTALL_THEORIES)
	$(CHECK_THEORIES)

.PHONY: theories
theories: $(OPENTHEORY)
	$(MAKE) import-standard-theories
	$(MAKE) import-example-theories
	$(INSTALL_THEORIES)
	$(CHECK_THEORIES)

###############################################################################
# Export the Haskell theories.
###############################################################################

HASKELL_DIR = data/haskell

HASKELL_OPENTHEORY_EXPORT = ../../$(OPENTHEORY) export

HASKELL_OPENTHEORY_INFO = ../../$(OPENTHEORY) info

HASKELL_OPENTHEORY_LIST = ../../$(OPENTHEORY) list

.PHONY: haskell
haskell: $(OPENTHEORY)
	cd $(HASKELL_DIR)/opentheory && cabal install
	cd $(HASKELL_DIR)/example-utf8 && cabal install
	cd $(HASKELL_DIR) && ($(HASKELL_OPENTHEORY_LIST) | perl -ne '$$nv = $$_; chomp $$nv; if ($$nv =~ /^haskell-/) { $$n = `$(HASKELL_OPENTHEORY_INFO) --format NAME $$nv`; chomp $$n; $$n =~ s/^haskell-/opentheory-/; if ( -d $$n ) { (system("rm -r $$n") == 0) or die; print STDOUT "Re-exporting $$nv\n"; } else { print STDOUT "Exporting $$nv\n"; } (system("$(HASKELL_OPENTHEORY_EXPORT) $$nv") == 0) or die; (system("echo dist > $$n/.gitignore") == 0) or die; (system("find $$n") == 0) or die; (system("cd $$n && cabal install") == 0) or die; }')

###############################################################################
# Create the test OpenTheory directory.
###############################################################################

TEST_THEORY_DIR = test/theories

TEST_DIRECTORY_DIR = test/directory

TEST_OPENTHEORY = $(OPENTHEORY) -d $(TEST_DIRECTORY_DIR)

TEST_OPENTHEORY_INIT = $(TEST_OPENTHEORY) init

TEST_OPENTHEORY_INSTALL = $(TEST_OPENTHEORY) install --manual

.PHONY: test-directory
test-directory:
	$(MAKE) $(OPENTHEORY)
	rm -rf $(TEST_DIRECTORY_DIR)
	$(TEST_OPENTHEORY_INIT)
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/empty/empty.thy
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/bool-true-def/bool-true-def.thy
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/bool-true-thm/bool-true-thm.thy
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/bool-true/bool-true.thy
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/bool-true-assert/bool-true-assert.thy
	$(TEST_OPENTHEORY_INSTALL) $(TEST_THEORY_DIR)/bool-true-axiom/bool-true-axiom.thy

###############################################################################
# Initialization following a repo clone.
###############################################################################

.PHONY: init
init:
	@echo
	@echo '******************************************************'
	@echo '* Initialize this development snapshot of opentheory *'
	@echo '******************************************************'
	@echo
	$(MAKE) test-directory

###############################################################################
# Counting the number of lines of code.
###############################################################################

LINES = scripts/ml_lines

.PHONY: lines
lines: $(LINES)
	@echo
	@echo -n 'opentheory '
	@$(LINES) $(SRC) src/opentheory.sml
	@echo

###############################################################################
# Profiling using MLton.
###############################################################################

BENCHMARK_OPTS = info --preserve-theory --article -o benchmark.out ../hol-light/opentheory/articles/char-utf8-thm.thy

profile-time.mlb: bin/mlton/benchmark.sml
	echo '$$(SML_LIB)/basis/basis.mlb $$(SML_LIB)/basis/mlton.mlb $<' > $@

profile-time: profile-time.mlb
	@echo
	@echo '********************************************************'
	@echo '* Compile the OpenTheory benchmark with time profiling *'
	@echo '********************************************************'
	@echo
	$(MLTON) $(MLTON_OPTS) -profile time -profile-stack true -profile-branch true $<
	@echo

profile-time.out profile-time-log: profile-time
	time ./profile-time $(BENCHMARK_OPTS) | tee profile-time.log
	mv mlmon.out profile-time.out

profile-time.txt: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -keep '(and (thresh 0.1) (thresh-stack 0.1))' -split '.*' profile-time profile-time.out > $@

profile-time.dot: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -call-graph $@ -keep '(thresh-stack 5)' -graph-title "OpenTheory Time Profiling" -split '.*' profile-time profile-time.out > /dev/null

.PHONY: profile
profile: profile-time.txt profile-time.dot

###############################################################################
# Releasing.
###############################################################################

RELEASE_DIR = release

RELEASE_STAMP = scripts/release_stamp

.PHONY: release-stamp
release-stamp: $(RELEASE_STAMP)
	 $(RELEASE_STAMP) -p opentheory doc/*.html src/opentheory.sml

.PHONY: documentation
documentation:

.PHONY: tarball
tarball: clean doc/DONT-RELEASE Makefile.dev
	cd .. ; COPYFILE_DISABLE=true tar cvzhf opentheory/release/opentheory.tar.gz --exclude-from opentheory/doc/DONT-RELEASE opentheory

.PHONY: release
release: release-stamp mosml mlton polyml documentation
	rm -f $(RELEASE_DIR)/*.html $(RELEASE_DIR)/*.png
	cp -v doc/*.html doc/*.png $(RELEASE_DIR)/
	cp -v doc/favicon.ico $(RELEASE_DIR)/
	cp -v doc/GPL-LICENSE $(RELEASE_DIR)/
	cp -v doc/MIT-LICENSE $(RELEASE_DIR)/
	$(MAKE) tarball
	rsync -azv --delete --checksum --size-only --exclude=.cvsignore --exclude=CVS -e ssh $(RELEASE_DIR)/ gilith@login.gilith.com:public_html/software/opentheory
	ssh gilith@login.gilith.com '/bin/bash -l scripts/install_opentheory'
	echo Completed release

###############################################################################
# The build scripts.
###############################################################################

$(COPY): ../basic/scripts/copy_src
	@cp -fv $< $@
	@chmod -w $@

$(MLIMPORT): ../basic/scripts/mlimport $(COPY) ; @$(COPY) $< $@

$(MLPP): ../basic/scripts/mlpp $(COPY) ; @$(COPY) $< $@

$(MOSML_DEP): ../basic/scripts/mosml_dep $(COPY) ; @$(COPY) $< $@

$(LINES): ../basic/scripts/ml_lines $(COPY) ; @$(COPY) $< $@

$(RELEASE_STAMP): ../basic/scripts/release_stamp $(COPY) ; @$(COPY) $< $@

.PHONY: build-scripts
build-scripts: $(COPY) $(MLPP) $(MOSML_DEP) $(LINES) $(RELEASE_STAMP)
