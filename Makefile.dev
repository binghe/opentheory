###############################################################################
# OPENTHEORY DEVELOPMENT MAKEFILE
# Copyright (c) 2005 Joe Hurd, distributed under the GNU GPL version 2
###############################################################################

.PRECIOUS: bin/mlton/%.sml bin/mlton/%.mlb

###############################################################################
# Cleaning temporary files.
###############################################################################

TEMPFILE = Makefile-temp-file

TEMP += $(TEMPFILE) \
	bin/mlton/*.ssa bin/mlton/*.ssa2 \
        bin/mlton/benchmark \
        benchmark.out mlmon.out profile-*

###############################################################################
# The ML preprocessor.
###############################################################################

MLPP_OPTS += -r 'OpenTheoryDebug'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-0]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-1]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-2]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-3]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-4]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-5]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-6]'
#MLPP_OPTS += -r 'OpenTheoryDebug|OpenTheoryTrace[0-9]'
#MLPP_OPTS += -r 'BasicDebug|MetisDebug|OpenTheoryDebug|OpenTheoryTrace[0-9]'

###############################################################################
# The Moscow ML compiler.
###############################################################################

MOSML_DEP = scripts/mosml_dep

bin/mosml/Makefile.src: Makefile Makefile.dev $(MOSML_DEP) $(MLPP)
	@echo
	@echo '****************************************************'
	@echo '* Regenerating the Moscow ML makefile dependencies *'
	@echo '****************************************************'
	@echo
	@$(MOSML_DEP) $(MOSML_SRC) $(MOSML_TARGETS) > $@

###############################################################################
# The MLton compiler.
###############################################################################

MLTON_OPTS += -verbose 1 -keep ssa -keep ssa2
#MLTON_OPTS += -inline 100000
#MLTON_OPTS += -const 'MLton.safe false' -const 'MLton.detectOverflow false'
#MLTON_OPTS += -const 'Exn.keepHistory true'

###############################################################################
# Moving source files around.
###############################################################################

COPY = scripts/copy_src

MLIMPORT = scripts/mlimport

IMPORT_METIS = doc/IMPORT-METIS

src/Config.sig: ../basic/src/Config.sig $(COPY) ; @$(COPY) $< $@
src/Config.sml: ../basic/src/Config.sml $(COPY) ; @$(COPY) $< $@
src/ElementSet.sig: ../basic/src/ElementSet.sig $(COPY) ; @$(COPY) $< $@
src/ElementSet.sml: ../basic/src/ElementSet.sml $(COPY) ; @$(COPY) $< $@
src/Heap.sig: ../basic/src/Heap.sig $(COPY) ; @$(COPY) $< $@
src/Heap.sml: ../basic/src/Heap.sml $(COPY) ; @$(COPY) $< $@
src/KeyMap.sig: ../basic/src/KeyMap.sig $(COPY) ; @$(COPY) $< $@
src/KeyMap.sml: ../basic/src/KeyMap.sml $(COPY) ; @$(COPY) $< $@
src/Lazy.sig: ../basic/src/Lazy.sig $(COPY) ; @$(COPY) $< $@
src/Lazy.sml: ../basic/src/Lazy.sml $(COPY) ; @$(COPY) $< $@
src/Map.sig: ../basic/src/Map.sig $(COPY) ; @$(COPY) $< $@
src/Map.sml: ../basic/src/Map.sml $(COPY) ; @$(COPY) $< $@
src/MetisActive.sig: ../metis/src/Active.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisActive.sml: ../metis/src/Active.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtom.sig: ../metis/src/Atom.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtom.sml: ../metis/src/Atom.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtomNet.sig: ../metis/src/AtomNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisAtomNet.sml: ../metis/src/AtomNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisClause.sig: ../metis/src/Clause.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisClause.sml: ../metis/src/Clause.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisFormula.sig: ../metis/src/Formula.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisFormula.sml: ../metis/src/Formula.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisKnuthBendixOrder.sig: ../metis/src/KnuthBendixOrder.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisKnuthBendixOrder.sml: ../metis/src/KnuthBendixOrder.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteral.sig: ../metis/src/Literal.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteral.sml: ../metis/src/Literal.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteralNet.sig: ../metis/src/LiteralNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisLiteralNet.sml: ../metis/src/LiteralNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisModel.sig: ../metis/src/Model.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisModel.sml: ../metis/src/Model.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNameArity.sig: ../metis/src/NameArity.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNameArity.sml: ../metis/src/NameArity.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNormalize.sig: ../metis/src/Normalize.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisNormalize.sml: ../metis/src/Normalize.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProblem.sig: ../metis/src/Problem.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProblem.sml: ../metis/src/Problem.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProof.sig: ../metis/src/Proof.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisProof.sml: ../metis/src/Proof.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisResolution.sig: ../metis/src/Resolution.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisResolution.sml: ../metis/src/Resolution.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRewrite.sig: ../metis/src/Rewrite.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRewrite.sml: ../metis/src/Rewrite.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRule.sig: ../metis/src/Rule.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisRule.sml: ../metis/src/Rule.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubst.sig: ../metis/src/Subst.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubst.sml: ../metis/src/Subst.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubsume.sig: ../metis/src/Subsume.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisSubsume.sml: ../metis/src/Subsume.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTerm.sig: ../metis/src/Term.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTerm.sml: ../metis/src/Term.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTermNet.sig: ../metis/src/TermNet.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTermNet.sml: ../metis/src/TermNet.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisThm.sig: ../metis/src/Thm.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisThm.sml: ../metis/src/Thm.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTptp.sig: ../metis/src/Tptp.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisTptp.sml: ../metis/src/Tptp.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisUnits.sig: ../metis/src/Units.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisUnits.sml: ../metis/src/Units.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisWaiting.sig: ../metis/src/Waiting.sig $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/MetisWaiting.sml: ../metis/src/Waiting.sml $(MLIMPORT) $(IMPORT_METIS) ; @$(MLIMPORT) -c $(IMPORT_METIS) $< $@
src/Options.sig: ../basic/src/Options.sig $(COPY) ; @$(COPY) $< $@
src/Options.sml: ../basic/src/Options.sml $(COPY) ; @$(COPY) $< $@
src/Ordered.sig: ../basic/src/Ordered.sig $(COPY) ; @$(COPY) $< $@
src/Ordered.sml: ../basic/src/Ordered.sml $(COPY) ; @$(COPY) $< $@
src/Parse.sig: ../basic/src/Parse.sig $(COPY) ; @$(COPY) $< $@
src/Parse.sml: ../basic/src/Parse.sml $(COPY) ; @$(COPY) $< $@
src/Portable.sig: ../basic/src/Portable.sig $(COPY) ; @$(COPY) $< $@
src/PortableMosml.sml: ../basic/src/PortableMosml.sml $(COPY) ; @$(COPY) $< $@
src/PortableMlton.sml: ../basic/src/PortableMlton.sml $(COPY) ; @$(COPY) $< $@
src/PortablePolyml.sml: ../basic/src/PortablePolyml.sml $(COPY) ; @$(COPY) $< $@
src/Print.sig: ../basic/src/Print.sig $(COPY) ; @$(COPY) $< $@
src/Print.sml: ../basic/src/Print.sml $(COPY) ; @$(COPY) $< $@
src/Random.sig: ../basic/src/Random.sig $(COPY) ; @$(COPY) $< $@
src/Random.sml: ../basic/src/Random.sml $(COPY) ; @$(COPY) $< $@
src/RandomMap.sml: ../basic/src/RandomMap.sml $(COPY) ; @$(COPY) $< $@
src/RandomSet.sml: ../basic/src/RandomSet.sml $(COPY) ; @$(COPY) $< $@
src/Set.sig: ../basic/src/Set.sig $(COPY) ; @$(COPY) $< $@
src/Set.sml: ../basic/src/Set.sml $(COPY) ; @$(COPY) $< $@
src/Sharing.sig: ../basic/src/Sharing.sig $(COPY) ; @$(COPY) $< $@
src/Sharing.sml: ../basic/src/Sharing.sml $(COPY) ; @$(COPY) $< $@
src/Stream.sig: ../basic/src/Stream.sig $(COPY) ; @$(COPY) $< $@
src/Stream.sml: ../basic/src/Stream.sml $(COPY) ; @$(COPY) $< $@
src/Useful.sig: ../basic/src/Useful.sig $(COPY) ; @$(COPY) $< $@
src/Useful.sml: ../basic/src/Useful.sml $(COPY) ; @$(COPY) $< $@

src/selftest.sml: test/test.sml $(COPY) ; @$(COPY) $< $@

src/benchmark.sml: src/opentheory.sml $(COPY) ; @$(COPY) $< $@

###############################################################################
# Counting the number of lines of code.
###############################################################################

LINES = scripts/ml_lines

.PHONY: lines
lines: $(LINES)
	@echo
	@echo -n 'opentheory '
	@$(LINES) $(SRC) src/opentheory.sml
	@echo

###############################################################################
# Testing using the HOL Light theories.
###############################################################################

HOL_LIGHT_TEST_DIR = test/hol-light

HOL_LIGHT_SRC_DIR_NAME = src

HOL_LIGHT_SRC_DIR = $(HOL_LIGHT_TEST_DIR)/$(HOL_LIGHT_SRC_DIR_NAME)

HOL_LIGHT_ARTICLES_DIRNAME = articles

HOL_LIGHT_ARTICLES_DIR = $(HOL_LIGHT_TEST_DIR)/$(HOL_LIGHT_ARTICLES_DIRNAME)

HOL_LIGHT_THEORIES = \
  bool \
  tactics \
  simp \
  theorems \
  ind-defs \
  class \
  trivia \
  canon \
  meson \
  quot \
  pair \
  num \
  arith \
  wf \
  calc_num \
  normalizer \
  grobner \
  ind-types \
  list \
  realax \
  calc_int \
  realarith \
  real \
  calc_rat \
  int \
  sets \
  iter \
  cart \
  define

HOL_LIGHT_EXAMPLES = \
  example-ord-1 \
  example-ord-2 \
  example-pos-1

.PHONY: hol-light-test-install
hol-light-test-install:
	rm -rf $(HOL_LIGHT_SRC_DIR)
	mkdir $(HOL_LIGHT_SRC_DIR)
	cd $(HOL_LIGHT_SRC_DIR) && echo "Untarring into $(HOL_LIGHT_SRC_DIR)" && tar xzf ../hol-light.tgz && rm hol.ml && ln -s ../scripts/hol.ml && ln -s ../scripts/logging.ml && ln -s ../scripts/deduction-logging.ml && for f in $(HOL_LIGHT_EXAMPLES) ; do ln -s ../scripts/$$f.ml ; done && for f in $(HOL_LIGHT_THEORIES) ; do if test "$$f" = "pair" ; then echo "skipping preprocessing theory $$f" ; else echo "preprocessing theory $$f" && ../scripts/install-theory.hs < $$f.ml > foo.ml && mv foo.ml $$f.ml ; fi ; done

.PHONY: hol-light-test-log
hol-light-test-log:
	cd $(HOL_LIGHT_SRC_DIR) ; echo '#use "hol.ml";;' | ocaml

.PHONY: hol-light-test-thys
hol-light-test-thys:
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do ((echo "theory { interpret {" ; cat test/interpretations/hol-light.int ; echo "} in article \"../$(HOL_LIGHT_SRC_DIR_NAME)/$$f.art\"; }") | cat > $(HOL_LIGHT_ARTICLES_DIR)/$$f.thy) ; done

.PHONY: hol-light-test-arts
hol-light-test-arts: $(OPENTHEORY)
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do echo $$f ; $(OPENTHEORY) compile --article $(HOL_LIGHT_ARTICLES_DIR)/$$f.art --summary-text $(HOL_LIGHT_ARTICLES_DIR)/$$f.sum $(HOL_LIGHT_ARTICLES_DIR)/$$f.thy ; done

.PHONY: hol-light-test-cthys
hol-light-test-cthys:
	thy='' ; for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do thy="$$thy article \"$$f.art\";" ; echo "theory { $$thy }" > $(HOL_LIGHT_ARTICLES_DIR)/$$f.cthy ; done

.PHONY: hol-light-test-carts
hol-light-test-carts: $(OPENTHEORY)
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do $(OPENTHEORY) compile --article $(HOL_LIGHT_ARTICLES_DIR)/$$f.cart --summary-text $(HOL_LIGHT_ARTICLES_DIR)/$$f.csum $(HOL_LIGHT_ARTICLES_DIR)/$$f.cthy ; done

.PHONY: hol-light-test-creqs
hol-light-test-creqs:
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do perl -ne 'if ($$_ =~ /^(assumed|axioms):/) { $$d = 1; } elsif ($$_ =~ /^[^ ]/) { $$d = undef; } if (defined($$d)) { print $$_; }' < $(HOL_LIGHT_ARTICLES_DIR)/$$f.csum > $(HOL_LIGHT_ARTICLES_DIR)/$$f.req ; done
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do ok=0 ; for g in $(HOL_LIGHT_TEST_DIR)/good.req.* ; do if diff -q $(HOL_LIGHT_ARTICLES_DIR)/$$f.req $$g >/dev/null ; then ok=1 ; fi ; done ; if test "$$ok" = "0" ; then cat $(HOL_LIGHT_ARTICLES_DIR)/$$f.req ; echo "bad theory requirements in $$f" ; exit 1 ; fi ; done

.PHONY: hol-light-test-compress
hol-light-test-compress:
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do if test ! $(HOL_LIGHT_SRC_DIR)/$$f.art.gz -nt $(HOL_LIGHT_SRC_DIR)/$$f.art ; then gzip -c $(HOL_LIGHT_SRC_DIR)/$$f.art > $(HOL_LIGHT_SRC_DIR)/$$f.art.gz ; fi ; if test ! $(HOL_LIGHT_ARTICLES_DIR)/$$f.art.gz -nt $(HOL_LIGHT_ARTICLES_DIR)/$$f.art ; then gzip -c $(HOL_LIGHT_ARTICLES_DIR)/$$f.art > $(HOL_LIGHT_ARTICLES_DIR)/$$f.art.gz ; fi ; ls -l $(HOL_LIGHT_SRC_DIR)/$$f.art ; ls -l $(HOL_LIGHT_ARTICLES_DIR)/$$f.art ; ls -l $(HOL_LIGHT_SRC_DIR)/$$f.art.gz ; ls -l $(HOL_LIGHT_ARTICLES_DIR)/$$f.art.gz ; done

.PHONY: hol-light-test-stats
hol-light-test-stats:
	for f in $(HOL_LIGHT_THEORIES) $(HOL_LIGHT_EXAMPLES) ; do (echo $$f | perl -ne '$$f = $$_; chomp $$f; $$f =~ s/_/\\_/g; print "\\hollighttheory{$$f}";'; (ls -l $(HOL_LIGHT_SRC_DIR)/$$f.art ; ls -l $(HOL_LIGHT_ARTICLES_DIR)/$$f.art ; ls -l $(HOL_LIGHT_SRC_DIR)/$$f.art.gz ; ls -l $(HOL_LIGHT_ARTICLES_DIR)/$$f.art.gz) | perl -ne 'BEGIN { $$s = -1; } $$_ =~ /^[-rwx]+ +[[:digit:]]+ +[[:alpha:]]+ +[[:alpha:]]+ +([[:digit:]]+) / or die; $$n = $$1; $$n = int($$n / 1024); $$pa = $$n; $$pb = ""; while ($$pa =~ /^([[:digit:]]+)([[:digit:]]{3})$$/) { $$pa = $$1; $$pb = ",$$2$$pb"; } print " & $$pa$$pb"; if ($$s < 0) { $$s = $$n; } else { $$r = 100 - int(100.0 * $$n / $$s); print " & $$r\\%"; $$s = -1; }' ; echo ' \\\\') | tee $(HOL_LIGHT_ARTICLES_DIR)/$$f.stat ; done
	rm -f $(HOL_LIGHT_TEST_DIR)/results.tex ; for f in $(HOL_LIGHT_THEORIES) ; do cat $(HOL_LIGHT_ARTICLES_DIR)/$$f.stat >> $(HOL_LIGHT_TEST_DIR)/results.tex ; done
	rm -f $(HOL_LIGHT_TEST_DIR)/examples.tex ; for f in $(HOL_LIGHT_EXAMPLES) ; do cat $(HOL_LIGHT_ARTICLES_DIR)/$$f.stat >> $(HOL_LIGHT_TEST_DIR)/examples.tex ; done

.PHONY: hol-light-test
hol-light-test: hol-light-test-install hol-light-test-log hol-light-test-thys hol-light-test-arts hol-light-test-cthys hol-light-test-carts hol-light-test-creqs hol-light-test-compress hol-light-test-stats

###############################################################################
# Profiling using MLton.
###############################################################################

BENCHMARK_OPTS = -d test/opentheory compile --article benchmark.out test/opentheory/packages/hol-light-2009.8.24/hol-light.thy

profile-time.mlb: bin/mlton/benchmark.sml
	echo '$$(SML_LIB)/basis/basis.mlb $$(SML_LIB)/basis/mlton.mlb $<' > $@

profile-time: profile-time.mlb
	@echo
	@echo '********************************************************'
	@echo '* Compile the OpenTheory benchmark with time profiling *'
	@echo '********************************************************'
	@echo
	$(MLTON) $(MLTON_OPTS) -profile time -profile-stack true -profile-branch true $<
	@echo

profile-time.out profile-time-log: profile-time
	time ./profile-time $(BENCHMARK_OPTS) | tee profile-time-log
	mv mlmon.out profile-time.out

profile-time.txt: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -keep '(and (thresh 0.1) (thresh-stack 0.1))' -split '.*' profile-time profile-time.out > $@

profile-time.dot: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -call-graph $@ -keep '(thresh-stack 10)' -graph-title "OpenTheory Time Profiling" -split '.*' profile-time profile-time.out > /dev/null

.PHONY: profile
profile: profile-time.txt profile-time.dot

###############################################################################
# Releasing.
###############################################################################

RELEASE_DIR = release

RELEASE_STAMP = scripts/release_stamp

.PHONY: release-stamp
release-stamp: $(RELEASE_STAMP)
	 $(RELEASE_STAMP) -p opentheory doc/*.html src/opentheory.sml

.PHONY: tarball
tarball: clean doc/DONT-RELEASE Makefile.dev
	cd .. ; tar cvzhf opentheory/release/opentheory.tar.gz --exclude-from opentheory/doc/DONT-RELEASE opentheory

.PHONY: release
release: release-stamp mosml mlton polyml
	rm -f $(RELEASE_DIR)/*.html $(RELEASE_DIR)/*.txt $(RELEASE_DIR)/*.png
	cp -v doc/*.html doc/*.txt doc/*.png $(RELEASE_DIR)/
	cp -v doc/favicon.ico $(RELEASE_DIR)/
	$(MAKE) tarball
	rsync -azv --delete --checksum --size-only --exclude=.cvsignore --exclude=CVS -e ssh $(RELEASE_DIR)/ gilith@login.gilith.com:public_html/software/opentheory
	ssh gilith@login.gilith.com '/bin/bash -l scripts/install_opentheory'

###############################################################################
# The build scripts.
###############################################################################

$(COPY): ../basic/scripts/copy_src
	@cp -fv $< $@
	@chmod -w $@

$(MLIMPORT): ../basic/scripts/mlimport $(COPY) ; @$(COPY) $< $@

$(MLPP): ../basic/scripts/mlpp $(COPY) ; @$(COPY) $< $@

$(MOSML_DEP): ../basic/scripts/mosml_dep $(COPY) ; @$(COPY) $< $@

$(LINES): ../basic/scripts/ml_lines $(COPY) ; @$(COPY) $< $@

$(RELEASE_STAMP): ../basic/scripts/release_stamp $(COPY) ; @$(COPY) $< $@

.PHONY: build-scripts
build-scripts: $(COPY) $(MLPP) $(MOSML_DEP) $(LINES) $(RELEASE_STAMP)
