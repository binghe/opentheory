#!/usr/bin/perl

# Copyright (c) 2011 Joe Leslie-Hurd, distributed under the MIT license

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;

use vars qw($opt_h $opt_a $opt_l $opt_p $opt_u);

###############################################################################
# Process options.
###############################################################################

getopts('ha:l:p:u');

if ($opt_h or scalar @ARGV != 1)
{
    pod2usage({-exitval => 2,
	       -verbose => 2});
}

# Autoflush STDIN
$|++;

my $program = "import-theories";

my $author = 'Joe Leslie-Hurd <joe@gilith.com>';
if ($opt_a) { $author = $opt_a; }

my $license = 'MIT';
if ($opt_l) { $license = $opt_l; }

my $provenance = 'Theory';
if ($opt_p) { $provenance = $opt_p; }

my $opentheory = "bin/mlton/opentheory";
[ -x $opentheory ] or die "$program: $opentheory not an executable";

my $bumpver = "scripts/bump-theory-version";
[ -x $bumpver ] or die "$program: $bumpver not an executable";

my $source = $ARGV[0];
if ($source ne '/' && $source =~ m{^(.*)/$}) { $source = $1; }
[ -d $source ] or die "$program: $source not a directory";

my $target = "data/theories";
[ -d $target ] or die "$program: $target not a directory";

###############################################################################
# Execute commands.
###############################################################################

sub execute_command {
  (scalar @_ == 1) or die;
  my $cmd = shift @_;

#  print STDOUT "$cmd\n";

  my $result = system($cmd);

  return $result;
}

sub same_file_contents {
  (scalar @_ == 2) or die;
  my $file1 = shift @_;
  my $file2 = shift @_;

  [ -e $file1 ] or die "$program: file $file1 doesn't exist\n";
  [ -e $file2 ] or die "$program: file $file2 doesn't exist\n";

  my $cmd = "diff $file1 $file2 >/dev/null";

  return (execute_command ($cmd) == 0);
}

sub import_article {
  (scalar @_ == 3) or die;
  my $base = shift @_;
  my $thy = shift @_;
  my $art = shift @_;

  my $cmd;

  $cmd = "$opentheory info --preserve-theory --article -o $art $source/$thy";
  (execute_command ($cmd) == 0) or
    die "$program: couldn't execute $cmd: $!\n";

  $cmd = "grep 'Unwanted' $art";
  (execute_command ($cmd) != 0) or
    die "$program: Unwanted symbols found in $base\n";
}

sub bump_theory_version {
  (scalar @_ == 2) or die;
  my $name = shift @_;
  my $thy = shift @_;

  my $cmd = "$opentheory info --format VERSION $thy";
  my $version = `$cmd`;
  chomp $version;

  $cmd = "$opentheory info --format CHECKSUM $name-$version >/dev/null 2>&1";
  my $installed = (system ($cmd) == 0);

  if ($installed) {
    if (!$opt_u) {
      die "$program: need to upgrade $name theory but no -u flag specified\n";
    }

    my $thynew = "$thy.bumping";

    $cmd = "$bumpver -p $thy > $thynew";
    (execute_command ($cmd) == 0) or
      die "$program: couldn't execute $cmd: $!\n";

    rename($thynew,$thy) or
      die "$program: couldn't rename $thynew to $thy: $!\n";
  }
}

###############################################################################
# Import theories.
###############################################################################

my $cmd = "ls $source";

# print STDOUT "cmd = $cmd\n";

open THEORIES, "$cmd |" or
  die "$program: couldn't read $source directory: $!\n";

while (my $thy = <THEORIES>) {
  chomp $thy;

  if ($thy =~ m{^([[:alnum:]-]+)-haskell-(src|test)[.]thy$}) {
    my $base = $1;
    my $kind = $2;
    my $tdir = "$target/$base";
    my $tthy = "$tdir/$base.thy";

    my $tart = "$tdir/haskell";
    if ($kind ne "src") { $tart .= "-" . $kind; }
    $tart .= ".art";
    my $tartnew = "$tart.importing";

    [ -d $tdir ] or
      die "$program: directory $tdir doesn't exist: $!\n";

    import_article ($base, $thy, $tartnew);

    if (defined( -e $tart )) {
      my $replace = !same_file_contents($tartnew,$tart);

      if ($replace) {
        bump_theory_version ($base, $tthy);

        rename($tartnew,$tart) or
          die "$program: couldn't rename $tartnew to $tart: $!\n";

        print STDOUT "re-imported $base haskell-$kind\n";
      }
      else {
        unlink $tartnew or
          die "$program: couldn't remove $tartnew: $!\n";
      }
    }
    else {
      bump_theory_version ($base, $tthy);

      rename($tartnew,$tart) or
        die "$program: couldn't rename $tartnew to $tart: $!\n";

      print STDOUT "imported $base haskell-$kind\n";
    }
  }
  elsif ($thy =~ m{^([[:alnum:]-]+)[.]int$}) {
    my $base = $1;
    my $sint = "$source/$thy";
    my $tdir = "$target/$base";
    my $tthy = "$tdir/$base.thy";
    my $tint = "$tdir/hol-light.int";

    [ -d $tdir ] or
      die "$program: directory $tdir doesn't exist: $!\n";

    if (defined( -e $tint )) {
      my $replace = !same_file_contents($tint,$sint);

      if ($replace) {
        bump_theory_version ($base, $tthy);

        (system("cp $sint $tint") == 0) or
          die "$program: couldn't copy $sint to $tint: $!\n";

        print STDOUT "re-imported $base hol-light-int\n";
      }
    }
    else {
      bump_theory_version ($base, $tthy);

      (system("cp $sint $tint") == 0) or
        die "$program: couldn't copy $sint to $tint: $!\n";

      print STDOUT "imported $base hol-light-int\n";
    }
  }
  elsif ($thy =~ m{^([[:alnum:]-]+)-hol-light-thm[.]thy$}) {
    my $base = $1;
    my $tdir = "$target/$base";
    my $tthy = "$tdir/$base.thy";

    my $tart = "$tdir/hol-light.art";
    my $tartnew = "$tart.importing";

    [ -d $tdir ] or
      die "$program: directory $tdir doesn't exist: $!\n";

    import_article ($base, $thy, $tartnew);

    if (defined( -e $tart )) {
      my $replace = !same_file_contents($tartnew,$tart);

      if ($replace) {
        bump_theory_version ($base, $tthy);

        rename($tartnew,$tart) or
          die "$program: couldn't rename $tartnew to $tart: $!\n";

        print STDOUT "re-imported $base hol-light-thm\n";
      }
      else {
        unlink $tartnew or
          die "$program: couldn't remove $tartnew: $!\n";
      }
    }
    else {
      bump_theory_version ($base, $tthy);

      rename($tartnew,$tart) or
        die "$program: couldn't rename $tartnew to $tart: $!\n";

      print STDOUT "imported $base hol-light-thm\n";
    }
  }
  elsif ($thy =~ m{^([[:alnum:]-]+)[.]thy$}) {
    my $base = $1;
    my $tdir = "$target/$base";
    my $tthy = "$tdir/$base.thy";
    my $tart = "$tdir/$base.art";
    my $tartnew = "$tart.importing";

    if (!(-d $tdir)) {
      mkdir $tdir or
        die "$program: couldn't make directory $tdir: $!\n";

      my $today = `date "+%Y-%m-%d"`;
      chomp $today;

      open THEORY, "> $tthy" or
        die "$program: couldn't open $tthy for writing: $!\n";

      print THEORY "name: $base\n";
      print THEORY "version: 1.0\n";
      print THEORY "description: $base\n";
      print THEORY "author: $author\n";
      print THEORY "license: $license\n";
      print THEORY "provenance: $provenance extracted on $today\n";
      print THEORY "show: \"Data.Bool\"\n";
      print THEORY "\n";
      print THEORY "main {\n";
      print THEORY "  article: \"$base.art\"\n";
      print THEORY "}\n";

      close THEORY;
    }

    import_article ($base, $thy, $tartnew);

    if (defined( -e $tart )) {
      my $replace = !same_file_contents ($tartnew,$tart);

      if ($replace) {
        if (( -s $tart ) <= ( -s $tartnew )) {
          $cmd = "$opentheory info --theorems -o $tart.thms article:$tart";
          (execute_command ($cmd) == 0) or
            die "$program: couldn't execute $cmd: $!\n";

          $cmd = "$opentheory info --theorems -o $tartnew.thms article:$tartnew";
          (execute_command ($cmd) == 0) or
            die "$program: couldn't execute $cmd: $!\n";

          $cmd = "diff $tart.thms $tartnew.thms >/dev/null";
          if (execute_command ($cmd) == 0) {
            $cmd = "$opentheory info --show-assumptions --assumptions -o $tart.asms article:$tart";
            (execute_command ($cmd) == 0) or
              die "$program: couldn't execute $cmd: $!\n";

            $cmd = "$opentheory info --show-assumptions --assumptions -o $tartnew.asms article:$tartnew";
            (execute_command ($cmd) == 0) or
              die "$program: couldn't execute $cmd: $!\n";

            $cmd = "diff $tart.asms $tartnew.asms >/dev/null";
            if (execute_command ($cmd) == 0) {
              $replace = 0;
            }

            unlink "$tart.asms" or
              die "$program: couldn't remove $tart.asms: $!\n";

            unlink "$tartnew.asms" or
              die "$program: couldn't remove $tartnew.asms: $!\n";
          }

          unlink "$tart.thms" or
            die "$program: couldn't remove $tart.thms: $!\n";

          unlink "$tartnew.thms" or
            die "$program: couldn't remove $tartnew.thms: $!\n";
        }
      }

      if ($replace) {
        bump_theory_version ($base, $tthy);

        rename($tartnew,$tart) or
          die "$program: couldn't rename $tartnew to $tart: $!\n";

        print STDOUT "re-imported $base\n";
      }
      else {
        unlink $tartnew or
          die "$program: couldn't remove $tartnew: $!\n";
      }
    }
    else {
      rename($tartnew,$tart) or
        die "$program: couldn't rename $tartnew to $tart: $!\n";

      print STDOUT "imported $base\n";
    }
  }
}

close THEORIES;

__END__

=pod

=head1 NAME

import-theories - import theories extracted from a theorem prover

=head1 SYNOPSIS

import-theories [-h] [-a AUTHOR] [-l LICENSE] [-p PROVENANCE] [-u] <theory-dir>

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-h>

Produce this documentation.

=item B<-a AUTHOR>

Set the default author.

=item B<-l LICENSE>

Set the default license.

=item B<-p PROVENANCE>

Set the default provenance.

=item B<-u>

Auto-upgrade the theories during import.

=back

=head1 DESCRIPTION

Import raw theories in OpenTheory format extracted from a theorem prover.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Leslie-Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
