#!/usr/bin/perl

# Copyright (c) 2011 Joe Leslie-Hurd, distributed under the MIT license

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;

use vars qw($opt_h $opt_v);

###############################################################################
# Process options.
###############################################################################

getopts('hv');

if ($opt_h or scalar @ARGV != 0)
{
  pod2usage({-exitval => 2,
             -verbose => 2});
}

# Autoflush STDIN
$|++;

my $program = "check-theories";

my $orderthys = "scripts/order-theories";
[ -x $orderthys ] or die "$program: $orderthys not an executable";

my $opentheory = "bin/mlton/opentheory";
[ -x $opentheory ] or die "$program: $opentheory not an executable";

my $source = "data/theories";
[ -d $source ] or die "$program: $source not a directory";

###############################################################################
# Global variables.
###############################################################################

my %toplevel = ();
my %installed = ();
my %version = ();

###############################################################################
# Helper functions.
###############################################################################

sub is_name {
  (scalar @_ == 1) or die;
  my $n = shift @_;

  if ($n =~ m{^(?:(?:[[:alpha:]][[:alnum:]]*-)*[[:alpha:]][[:alnum:]]*)$}) {
    return 1;
  }
  else {
    return 0;
  }
}

sub is_version {
  (scalar @_ == 1) or die;
  my $v = shift @_;

  if ($v =~ m{^(?:[[:digit:]]+[.])*[[:digit:]]+$}) {
    return 1;
  }
  else {
    return 0;
  }
}

sub is_name_version {
  (scalar @_ == 1) or die;
  my $nv = shift @_;

  if ($nv =~ m{^([[:alnum:]-]+)-([[:digit:].]+)$}) {
    return is_name($1) && is_version($2);
  }
  else {
    return 0;
  }
}

sub name_version_to_name {
  (scalar @_ == 1) or die;
  my $nv = shift @_;

  if ($nv =~ m{^([[:alnum:]-]+)-([[:digit:].]+)$}) {
    return $1;
  }
  else {
    die "$program: not a valid NAME-VERSION: $nv";
  }
}

sub add_installed {
  (scalar @_ == 2) or die;
  my $par = shift @_;
  my $thy = shift @_;

  $installed{$thy} = $par;

  ($thy =~ m{^([[:alnum:]-]+)-([[:digit:].]+)$}) or
    die "$program: bad theory name: $thy";

  my $n = $1;
  my $v = $2;

  if (exists $version{$n}) {
    if ($version{$n} ne $v) {
      die "$program: multiple versions of theory $n";
    }
  }
  else {
    $version{$n} = $v;
  }
}

sub add_toplevel {
  (scalar @_ == 1) or die;
  my $thy = shift @_;

  if (exists $toplevel{$thy}) {
    die "$program: duplicate top-level theory: $thy";
  }

  $toplevel{$thy} = 1;

  add_installed('',$thy);
}

sub add_dependent {
  (scalar @_ == 2) or die;
  my $thy = shift @_;
  my $subthy = shift @_;

  if (!(exists $installed{$subthy})) {
    add_installed($thy,$subthy);
  }
}

###############################################################################
# Check theories.
###############################################################################

my $cmd = "$opentheory list Mine";

if ($opt_v) { print STDOUT "$cmd\n"; }

open THEORIES, "$cmd |" or
  die "$program: couldn't list installed theories: $!\n";

while (my $thy = <THEORIES>) {
  chomp $thy;

  is_name_version($thy) or
    die "$program: bad theory name: $thy";

  my $thy_name = name_version_to_name($thy);

  if ( -d "$source/$thy_name" ) {
    add_toplevel($thy);

    $cmd = "$opentheory list '(Requires | Includes)* $thy'";

    if ($opt_v) { print STDOUT "$cmd\n"; }

    open SUBTHEORIES, "$cmd |" or
      die "$program: couldn't list dependent theories of $thy: $!\n";

    while (my $subthy = <SUBTHEORIES>) {
      chomp $subthy;

      is_name_version($subthy) or
        die "$program: bad dependent theory of $thy: $subthy";

      add_dependent($thy,$subthy);
    }

    close SUBTHEORIES;
  }
  else {
    die "$program: couldn't find source for theory $thy_name\n";
  }
}

close THEORIES;

$cmd = "$orderthys";

if ($opt_v) { print STDOUT "$cmd\n"; }

open THEORIES, "$cmd |" or
  die "$program: couldn't order theories in source directory: $!\n";

while (my $thy = <THEORIES>) {
  chomp $thy;

  is_name($thy) or
    die "$program: bad theory name: $thy";

###############################################################################
# Check this theory is useful and up to date
###############################################################################

  my $thydir = "$source/$thy";

  if (exists $version{$thy}) {
    my $info1 = `$opentheory info --information $thydir/$thy.thy`;

    if ($info1 =~ /^version: ([[:digit:].]+)$/m) {
      my $version1 = $1;

      my $version2 = $version{$thy};

      if ($version1 eq $version2) {
        my $info2 = `$opentheory info --information $thy-$version2`;

        if ($info1 eq $info2) {
          if ($info1 !~ /^requires: /m &&
              $thy ne "base" &&
              $thy ne "bool" &&
              $thy ne "bool-def")
          {
            print STDOUT "$program: theory $thy has no requires information\n";
          }
        }
        else {
          print STDOUT "$program: different package information in installed theory $thy\n";
        }
      }
      else {
        print STDOUT "$program: theory $thy: version = $version1; installed = $version2\n";
      }
    }
    else {
      print STDOUT "$program: no version information found in theory $thy\n";
    }
  }
  else {
    if ($thy ne "empty") {
      print STDOUT "$program: $thy not in the latest theory set\n";
    }
  }

###############################################################################
# Check the theory files
###############################################################################

  my $files1 = `$opentheory info --files $thydir/$thy.thy | sort`;

  my $files2 = `ls $thydir`;

  if ($files1 ne $files2) {
    print STDOUT "$program: different files in theory $thy\n";
  }

###############################################################################
# Check the requires: list in theory files
###############################################################################

  $cmd = "grep '^requires: ' $thydir/$thy.thy | sort -c 2> /dev/null";

  if ($opt_v) { print STDOUT "$cmd\n"; }

  if (system($cmd) != 0) {
    print STDOUT "$program: unsorted requires: list in theory $thy\n";
  }

###############################################################################
# Check the show: list in theory files
###############################################################################

  $cmd = "grep '^show: ' $thydir/$thy.thy | sed 's/^show: .* as /show: /' | sort -c 2> /dev/null";

  if ($opt_v) { print STDOUT "$cmd\n"; }

  if (system($cmd) != 0) {
    print STDOUT "$program: unsorted show: list in theory $thy\n";
  }

###############################################################################
# Check the theorems
###############################################################################

  $cmd = "$opentheory info --theorems $thy | grep '^[\"]\\(HOLLight\\|Unwanted\\)[.]'";

  if ($opt_v) { print STDOUT "$cmd\n"; }

  if (system ($cmd) == 0) {
    print STDOUT "$program: unwanted/system names in theory $thy\n";
  }

###############################################################################
# Check definitions occur only in *-def leaf theories
###############################################################################

  $cmd = "$opentheory info --includes $thy | grep '^' > /dev/null";

  if ($opt_v) { print STDOUT "$cmd\n"; }

  if (system ($cmd) != 0) {
    my $defthy = ($thy =~ /-def$/ or $thy =~ /-witness$/);

    $cmd = "$opentheory info --theory $thy | grep '^[[:digit:]]\\+ defined ' > /dev/null";

    if ($opt_v) { print STDOUT "$cmd\n"; }

    if (system ($cmd) == 0) {
      if (!$defthy) {
        print STDOUT "$program: definitions present in leaf theory $thy\n";
      }
    }
    else {
      if ($defthy) {
        print STDOUT "$program: no definitions present in theory $thy\n";
      }
    }
  }
}

close THEORIES;

###############################################################################
# Check all theories are up-to-date
###############################################################################

$cmd = "$opentheory list --dependency-order '~UpToDate (Requires|Includes)* Mine'";

if ($opt_v) { print STDOUT "$cmd\n"; }

open THEORIES, "$cmd |" or
  die "$program: couldn't list my not-up-to-date theories: $!\n";

my $notuptodatetext = '';
my %notuptodate = ();

while (my $thy = <THEORIES>) {
  chomp $thy;

  $notuptodatetext .= "  " . $thy . "\n";
  $notuptodate{$thy} = 1;
}

close THEORIES;

if ($notuptodatetext ne '') {
  print STDOUT ("$program: not-up-to-date theories:\n" . $notuptodatetext);
}

###############################################################################
# Check subtheories do not require extra theories
###############################################################################

$cmd = "$opentheory list 'Mine - axiom'";

if ($opt_v) { print STDOUT "$cmd\n"; }

open THEORIES, "$cmd |" or
  die "$program: couldn't list my theories: $!\n";

my $extrathys = "";

while (my $thy = <THEORIES>) {
  chomp $thy;

  if (!exists $notuptodate{$thy}) {
    $cmd = "$opentheory list '(Requires Subtheories* - (Subtheories* | Requires | Subtheories axiom)) $thy'";

    if ($opt_v) { print STDOUT "$cmd\n"; }

    open REQUIRED, "$cmd |" or
      die "$program: couldn't list required theories: $!\n";

    my $extra = '';

    while (my $req = <REQUIRED>) {
      chomp $req;

      $extra .= "\n    " . $req;
    }

    close REQUIRED;

    if ($extra ne "") {
      $extrathys .= "  $thy has subtheories that require these extra theories:" . $extra . "\n";
    }
  }
}

close THEORIES;

if ($extrathys ne "") {
  print STDOUT "$program: subtheories that require more:\n" . $extrathys;
}

__END__

=pod

=head1 NAME

check-theories - check theories against installed versions

=head1 SYNOPSIS

check-theories [-hv]

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-h>

Produce this documentation.

=item B<-v>

Verbose output.

=back

=head1 DESCRIPTION

List theories in dependency order.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Leslie-Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
