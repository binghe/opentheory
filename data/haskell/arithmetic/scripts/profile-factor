#!/usr/bin/perl

# Copyright (c) 2011 Joe Leslie-Hurd, distributed under the MIT license

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;

###############################################################################
# Process options.
###############################################################################

use vars qw($opt_t $opt_n $opt_h $opt_v);

$opt_n = 100;

getopts('t:n:hv');

if ($opt_h or scalar @ARGV != 0)
{
    pod2usage({-exitval => 2,
	       -verbose => 2});
}

# Autoflush STDIN
$|++;

###############################################################################
# Global variables.
###############################################################################

my $program = "profile-factor";

###############################################################################
# Helper functions.
###############################################################################

sub commify {
  local $_ = shift;
  1 while s/^(-?\d+)(\d{3})/$1,$2/;
  return $_;
}

sub get_results {
  (scalar @_ == 2) or die;
  my $name = shift @_;
  my $cmdprefix = shift @_;

  print STDOUT "<tr>";

  print STDOUT "<td align=\"right\"><b>";
  print STDOUT $name;
  print STDOUT "</b></td>";

  my $i = 10;
  while ($i <= 100) {
    if ($cmdprefix eq "header") {
      print STDOUT "<td align=\"right\"><b>";
      print STDOUT $i;
      print STDOUT "</b></td>";
    }
    else {
      print STDOUT "<td align=\"right\">";

      my $cmd = "$cmdprefix -n [$i]";
      if ($opt_t) {
        $cmd = "(ulimit -t $opt_t ; $cmd)";
      }
      $cmd .= ' &>/dev/null';

      if ($opt_v) {
        print STDOUT "\n$cmd\n";
      }

      my $s = 0;

      for (my $j = 0; $j < $opt_n; $j++) {
        if (system($cmd) == 0) {
          $s++;
        }
      }

      print STDOUT (int((100 * $s) / $opt_n) . '%</td>');
    }

    $i += 10;
  }

  print STDOUT "</tr>\n";
}

###############################################################################
# Main program.
###############################################################################

my $factor = "dist/build/arithmetic/arithmetic";
[ -x $factor ] or die "$program: $factor not an executable";

my $k = 1000;
print STDOUT ("<h2>Williams p+1 Method (" . commify($k) . " primes)</h2>\n");
print STDOUT "<table cellspacing=\"0\" cellpadding=\"4\" border=\"1\">\n";
get_results ("<em>log<sub>2</sub>N</em>", "header");
for (my $x = 1; $x <= 6; ++$x) {
  get_results (("$x base" . ($x == 1 ? "" : "s")),
               "$factor factor --algorithm=williams -x $x -k $k");
}
print STDOUT "</table>\n";

__END__

=pod

=head1 NAME

profile-factor - profile the factoring algorithms

=head1 SYNOPSIS

profile-factor [-t N] [-n N] [-hv]

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-t N>

Constrain each factoring attempt to be at most N seconds.

=item B<-n N>

Perform N factoring attempts for each bitwidth.

=item B<-h>

Produce this documentation.

=item B<-v>

Verbose output.

=back

=head1 DESCRIPTION

Profile the factoring algorithms.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Leslie-Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
