6
version
nil
"Data.Bool.!"
const
"->"
typeOp
0
def
0
ref
"Number.Natural.natural"
typeOp
nil
opType
1
def
"bool"
typeOp
nil
opType
2
def
nil
cons
3
def
cons
opType
4
def
3
ref
cons
opType
constTerm
5
def
"m"
1
ref
var
6
def
5
remove
"n"
1
ref
var
7
def
"="
const
8
def
0
ref
2
ref
0
ref
2
ref
3
remove
cons
opType
nil
cons
cons
opType
9
def
constTerm
"Number.Natural.divides"
const
0
ref
1
ref
4
remove
nil
cons
cons
opType
10
def
constTerm
6
remove
varTerm
11
def
appTerm
7
remove
varTerm
12
def
appTerm
appTerm
"Data.Bool.cond"
const
0
ref
2
remove
9
remove
nil
cons
cons
opType
constTerm
8
remove
10
remove
constTerm
13
def
11
ref
appTerm
"Number.Natural.zero"
const
1
ref
constTerm
14
def
appTerm
appTerm
13
ref
12
ref
appTerm
14
ref
appTerm
appTerm
13
remove
"Number.Natural.mod"
const
0
ref
1
ref
0
remove
1
ref
1
remove
nil
cons
cons
opType
nil
cons
cons
opType
constTerm
12
remove
appTerm
11
remove
appTerm
appTerm
14
remove
appTerm
appTerm
appTerm
absTerm
appTerm
absTerm
appTerm
15
def
axiom
nil
15
remove
thm
